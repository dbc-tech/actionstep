/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

// eslint-disable-next-line @typescript-eslint/no-namespace
export namespace Tasks {
  export interface paths {
    '/tasks': {
      /** @description Returns a collection of tasks */
      get: {
        responses: {
          /** @description OK. */
          200: {
            content: {
              'application/json': components['schemas']['PagedTasks']
            }
          }
        }
      }
      /** @description Create a new task. */
      post: {
        requestBody: components['requestBodies']['CreateTask']
        responses: {
          /** @description OK. */
          200: {
            content: {
              'application/json': components['schemas']['SingleTask']
            }
          }
        }
      }
    }
    '/tasks/{id}': {
      /** @description Returns a single task. */
      get: {
        parameters: {
          path: {
            /**
             * @description Unique identifier for a task.
             * @example 9287
             */
            id: number
          }
        }
        responses: {
          /** @description OK. */
          200: {
            content: {
              'application/json': components['schemas']['SingleTask']
            }
          }
        }
      }
      /** @description Update a task. */
      put: {
        parameters: {
          path: {
            /**
             * @description Unique identifier for a task.
             * @example 608
             */
            id: number
          }
        }
        requestBody: components['requestBodies']['UpdateTask']
        responses: {
          /** @description OK. */
          200: {
            content: {
              'application/json': components['schemas']['SingleTask']
            }
          }
        }
      }
      /** @description Delete a task. */
      delete: {
        parameters: {
          path: {
            /**
             * @description Unique identifier for a task.
             * @example 608
             */
            id: number
          }
        }
        responses: {
          /** @description Success, No Content. */
          204: {
            content: never
          }
        }
      }
    }
  }

  export type webhooks = Record<string, never>

  export interface components {
    schemas: {
      SingleTask: {
        tasks?: components['schemas']['Task']
        meta?: components['schemas']['PageMetaData']
      }
      PagedTasks: {
        tasks?: components['schemas']['Task'][]
        meta?: components['schemas']['PageMetaData']
      }
      PageMetaData: {
        paging?: components['schemas']['PagingData']
      }
      PagingData: {
        tasks?: components['schemas']['TasksPageData']
      }
      TasksPageData: {
        /**
         * @description The total number of tasks returned by the underlying query.
         * @example 2487
         */
        recordCount?: number
        /**
         * @description The total number of pages generated by the underlying query.
         * @example 50
         */
        pageCount?: number
        /**
         * @description The page number for this page of tasks.
         * @example 2
         */
        page?: number
        /**
         * @description Page size.
         * @example 50
         */
        pageSize?: number
        /**
         * @description A URL to the previous page of tasks.
         * @example https://ap-southeast-2.actionstep.com/api/rest/tasks?page=1
         */
        prevPage?: string
        /**
         * @description A URL to the next page of tasks.
         * @example https://ap-southeast-2.actionstep.com/api/rest/tasks?page=3
         */
        nextPage?: string
      }
      Task: {
        /**
         * @description Unique identifier for the task.
         * @example 2347
         */
        id?: number
        /**
         * @description Name for the task.
         * @example Research.
         */
        name?: string
        /**
         * @description Current status of the task.
         * @default Incomplete
         * @example Complete
         * @enum {string}
         */
        status?: 'Incomplete' | 'Complete' | 'Hidden' | 'Deleted'
        /**
         * @description Priority of the task.
         * @default Normal
         * @example High
         * @enum {string}
         */
        priority?: 'Low' | 'Normal' | 'High'
        /**
         * Format: timestamp
         * @description The date and time the task is due to be completed.
         * @example "2022-05-02T12:09:00.000Z"
         */
        dueTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task started.
         * @example "2022-05-01T12:09:00.000Z"
         */
        startedTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task completed.
         * @example "2022-05-02T12:10:30.000Z"
         */
        completedTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task was last modified.
         * @example "2022-05-02T12:10:35.000Z"
         */
        lastModifiedTimestamp?: string
        /**
         * @description (Deprecated) Number of hours spent on the task.
         * @example 2.5
         */
        actualHours?: number
        /**
         * @description (Deprecated) Number of billable hours for the task.
         * @example 2.5
         */
        billableHours?: number
        /**
         * @description Description for the task.
         * @example Research into the concrete manufacturing process.
         */
        description?: string
        /**
         * @description Actionstep user who assigned to the task.
         * @example Smith, John
         */
        assignedBy?: string
        /**
         * @description Unique identifier for the step in which the task should be completed.
         * @example 91764
         */
        completeDuringStep?: number
        /**
         * @description Unique identifier for the step before which the task should be completed.
         * @example 93299
         */
        completeBeforeStep?: number
        /**
         * Format: timestamp
         * @description (Deprecated) The date and time the task must be started by.
         * @example "2022-05-02T12:10:30.000Z"
         */
        mustStartBeforeTimestamp?: string
        /**
         * @description (Deprecated) Duration of the task.
         * @example 400
         */
        expectedDurationValue?: number
        /**
         * @description (Deprecated) Duration units for the task.
         * @example hours
         */
        expectedDurationUnits?: string
        /**
         * @description (Deprecated) Indicates if the task is on billing hold.
         * @example F
         * @enum {string}
         */
        isBillingHold?: 'T' | 'F'
        /**
         * @description (Deprecated) Indicates if the task has been part billed.
         * @example F
         * @enum {string}
         */
        isPartBilled?: 'T' | 'F'
        /**
         * @description (Deprecated) Indicates if the task is non-billable.
         * @example F
         * @enum {string}
         */
        confirmedNonBillable?: 'T' | 'F'
        /**
         * Format: timestamp
         * @description (Deprecated) Date and time the task is confirmed as non-billable.
         * @example "2022-05-02T12:10:30.000Z"
         */
        confirmedNonBillableTimestamp?: string
        /**
         * @description Indicates if the expected completion date triggers a workflow process.
         * @example T
         * @enum {string}
         */
        hasTriggerDate?: 'T' | 'F'
        /**
         * @description Data field used as the trigger for a workflow process.
         * @example DueDate
         */
        triggerField?: string
        /**
         * @description Offset (in days) from the trigger field value that is used to trigger a workflow process. For example, 2 days before the due date trigger a workflow to send an email reminder.
         * @example -2
         */
        triggerOffset?: number
        /**
         * @description Indicates if the offset is applicable to week days (Mon to Fri) only.
         * @example T
         * @enum {string}
         */
        triggerWeekdaysOnly?: 'T' | 'F'
        links?: components['schemas']['TaskLinks']
      }
      TaskLinks: {
        /**
         * @description Unique identifier for the data collection containing the trigger field.
         * @example 8834
         */
        triggerDataCollection?: number
        /**
         * @description Unique identifier of the matter to which the task is associated.
         * @example 34
         */
        action?: number
        /**
         * @description Actionstep user to whom this task has been assigned.
         * @example 14
         */
        assignee?: number
        /**
         * @description (Deprecated) Unique identifier of the rate table entry applicable to the task.
         * @example 17
         */
        rate?: number
        /**
         * @description (Deprecated) Actionstep user who confirmed the task as non-billable.
         * @example 383
         */
        confirmedNonBillableBy?: number
        /**
         * @description Unique identifier for a document template linked to the task.
         * @example 9642
         */
        linkedDocumentTemplate?: number
        /**
         * @description Unique identifier for the data collection linked with the task.
         * @example 4248
         */
        linkedDataCollection?: number
        /**
         * @description Unique identifier for a task template used for the task.
         * @example 23
         */
        template?: number
      }
      CreateTask: {
        /**
         * @description Name for the task.
         * @example Research.
         */
        name: string
        /**
         * @description Current status of the task.
         * @default Incomplete
         * @example Complete
         * @enum {string}
         */
        status?: 'Incomplete' | 'Complete' | 'Hidden' | 'Deleted'
        /**
         * @description Priority of the task.
         * @default Normal
         * @example High
         * @enum {string}
         */
        priority?: 'Low' | 'Normal' | 'High'
        /**
         * Format: timestamp
         * @description The date and time the task is due to be completed.
         * @example "2022-05-02T12:09:00.000Z"
         */
        dueTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task started.
         * @example "2022-05-01T12:09:00.000Z"
         */
        startedTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task completed.
         * @example "2022-05-02T12:10:30.000Z"
         */
        completedTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task was last modified.
         * @example "2022-05-02T12:10:35.000Z"
         */
        lastModifiedTimestamp?: string
        /**
         * @description (Deprecated) Number of hours spent on the task.
         * @example 2.5
         */
        actualHours?: number
        /**
         * @description (Deprecated) Number of billable hours for the task.
         * @example 2.5
         */
        billableHours?: number
        /**
         * @description Description for the task.
         * @example Research into the concrete manufacturing process.
         */
        description?: string
        /**
         * @description Actionstep user who assigned to the task.
         * @example Smith, John
         */
        assignedBy?: string
        /**
         * @description Unique identifier for the step in which the task should be completed.
         * @example 91764
         */
        completeDuringStep?: number
        /**
         * @description Unique identifier for the step before which the task should be completed.
         * @example 93299
         */
        completeBeforeStep?: number
        /**
         * Format: timestamp
         * @description (Deprecated) The date and time the task must be started by.
         * @example "2022-05-02T12:10:30.000Z"
         */
        mustStartBeforeTimestamp?: string
        /**
         * @description (Deprecated) Duration of the task.
         * @example 400
         */
        expectedDurationValue?: number
        /**
         * @description (Deprecated) Duration units for the task.
         * @example hours
         */
        expectedDurationUnits?: string
        /**
         * @description (Deprecated) Indicates if the task is on billing hold.
         * @example F
         * @enum {string}
         */
        isBillingHold?: 'T' | 'F'
        /**
         * @description (Deprecated) Indicates if the task has been part billed.
         * @example F
         * @enum {string}
         */
        isPartBilled?: 'T' | 'F'
        /**
         * @description (Deprecated) Indicates if the task is non-billable.
         * @example F
         * @enum {string}
         */
        confirmedNonBillable?: 'T' | 'F'
        /**
         * Format: timestamp
         * @description (Deprecated) Date and time the task is confirmed as non-billable.
         * @example "2022-05-02T12:10:30.000Z"
         */
        confirmedNonBillableTimestamp?: string
        /**
         * @description Indicates if the expected completion date triggers a workflow process.
         * @example T
         * @enum {string}
         */
        hasTriggerDate?: 'T' | 'F'
        /**
         * @description Data field used as the trigger for a workflow process.
         * @example DueDate
         */
        triggerField?: string
        /**
         * @description Offset (in days) from the trigger field value that is used to trigger a workflow process. For example, 2 days before the due date trigger a workflow to send an email reminder.
         * @example -2
         */
        triggerOffset?: number
        /**
         * @description Indicates if the offset is applicable to week days (Mon to Fri) only.
         * @example T
         * @enum {string}
         */
        triggerWeekdaysOnly?: 'T' | 'F'
        links?: components['schemas']['CreateTaskLinks']
      }
      CreateTasks: {
        tasks?: components['schemas']['CreateTask']
      }
      CreateTaskLinks: {
        /**
         * @description Unique identifier for the data collection containing the trigger field.
         * @example 8834
         */
        triggerDataCollection?: number
        /**
         * @description Unique identifier of the matter to which the task is associated.
         * @example 34
         */
        action: number
        /**
         * @description Actionstep user to whom this task has been assigned.
         * @example 14
         */
        assignee: number
        /**
         * @description (Deprecated) Unique identifier of the rate table entry applicable to the task.
         * @example 17
         */
        rate?: number
        /**
         * @description (Deprecated) Actionstep user who confirmed the task as non-billable.
         * @example 383
         */
        confirmedNonBillableBy?: number
        /**
         * @description Unique identifier for a document template linked to the task.
         * @example 9642
         */
        linkedDocumentTemplate?: number
        /**
         * @description Unique identifier for the data collection linked with the task.
         * @example 4248
         */
        linkedDataCollection?: number
        /**
         * @description Unique identifier for a task template used for the task.
         * @example 23
         */
        template?: number
      }
      UpdateTask: {
        /**
         * @description Name for the task.
         * @example Research.
         */
        name?: string
        /**
         * @description Current status of the task.
         * @default Incomplete
         * @example Complete
         * @enum {string}
         */
        status?: 'Incomplete' | 'Complete' | 'Hidden' | 'Deleted'
        /**
         * @description Priority of the task.
         * @default Normal
         * @example High
         * @enum {string}
         */
        priority?: 'Low' | 'Normal' | 'High'
        /**
         * Format: timestamp
         * @description The date and time the task is due to be completed.
         * @example "2022-05-02T12:09:00.000Z"
         */
        dueTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task started.
         * @example "2022-05-01T12:09:00.000Z"
         */
        startedTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task completed.
         * @example "2022-05-02T12:10:30.000Z"
         */
        completedTimestamp?: string
        /**
         * Format: timestamp
         * @description The date and time the task was last modified.
         * @example "2022-05-02T12:10:35.000Z"
         */
        lastModifiedTimestamp?: string
        /**
         * @description (Deprecated) Number of hours spent on the task.
         * @example 2.5
         */
        actualHours?: number
        /**
         * @description (Deprecated) Number of billable hours for the task.
         * @example 2.5
         */
        billableHours?: number
        /**
         * @description Description for the task.
         * @example Research into the concrete manufacturing process.
         */
        description?: string
        /**
         * @description Actionstep user who assigned to the task.
         * @example Smith, John
         */
        assignedBy?: string
        /**
         * @description Unique identifier for the step in which the task should be completed.
         * @example 91764
         */
        completeDuringStep?: number
        /**
         * @description Unique identifier for the step before which the task should be completed.
         * @example 93299
         */
        completeBeforeStep?: number
        /**
         * Format: timestamp
         * @description (Deprecated) The date and time the task must be started by.
         * @example "2022-05-02T12:10:30.000Z"
         */
        mustStartBeforeTimestamp?: string
        /**
         * @description (Deprecated) Duration of the task.
         * @example 400
         */
        expectedDurationValue?: number
        /**
         * @description (Deprecated) Duration units for the task.
         * @example hours
         */
        expectedDurationUnits?: string
        /**
         * @description (Deprecated) Indicates if the task is on billing hold.
         * @example F
         * @enum {string}
         */
        isBillingHold?: 'T' | 'F'
        /**
         * @description (Deprecated) Indicates if the task has been part billed.
         * @example F
         * @enum {string}
         */
        isPartBilled?: 'T' | 'F'
        /**
         * @description (Deprecated) Indicates if the task is non-billable.
         * @example F
         * @enum {string}
         */
        confirmedNonBillable?: 'T' | 'F'
        /**
         * Format: timestamp
         * @description (Deprecated) Date and time the task is confirmed as non-billable.
         * @example "2022-05-02T12:10:30.000Z"
         */
        confirmedNonBillableTimestamp?: string
        /**
         * @description Indicates if the expected completion date triggers a workflow process.
         * @example T
         * @enum {string}
         */
        hasTriggerDate?: 'T' | 'F'
        /**
         * @description Data field used as the trigger for a workflow process.
         * @example DueDate
         */
        triggerField?: string
        /**
         * @description Offset (in days) from the trigger field value that is used to trigger a workflow process. For example, 2 days before the due date trigger a workflow to send an email reminder.
         * @example -2
         */
        triggerOffset?: number
        /**
         * @description Indicates if the offset is applicable to week days (Mon to Fri) only.
         * @example T
         * @enum {string}
         */
        triggerWeekdaysOnly?: 'T' | 'F'
        links?: components['schemas']['UpdateTaskLinks']
      }
      UpdateTasks: {
        tasks?: components['schemas']['UpdateTask']
      }
      UpdateTaskLinks: {
        /**
         * @description Unique identifier for the data collection containing the trigger field.
         * @example 8834
         */
        triggerDataCollection?: number
        /**
         * @description Unique identifier of the matter to which the task is associated.
         * @example 34
         */
        action: number
        /**
         * @description Actionstep user to whom this task has been assigned.
         * @example 14
         */
        assignee: number
        /**
         * @description (Deprecated) Unique identifier of the rate table entry applicable to the task.
         * @example 17
         */
        rate?: number
        /**
         * @description (Deprecated) Actionstep user who confirmed the task as non-billable.
         * @example 383
         */
        confirmedNonBillableBy?: number
        /**
         * @description Unique identifier for a document template linked to the task.
         * @example 9642
         */
        linkedDocumentTemplate?: number
        /**
         * @description Unique identifier for the data collection linked with the task.
         * @example 4248
         */
        linkedDataCollection?: number
        /**
         * @description Unique identifier for a task template used for the task.
         * @example 23
         */
        template?: number
      }
    }
    responses: never
    parameters: never
    requestBodies: {
      CreateTask?: {
        content: {
          'application/json': components['schemas']['CreateTasks']
        }
      }
      UpdateTask?: {
        content: {
          'application/json': components['schemas']['UpdateTasks']
        }
      }
    }
    headers: never
    pathItems: never
  }

  export type $defs = Record<string, never>

  export type external = Record<string, never>

  export type operations = Record<string, never>
}
