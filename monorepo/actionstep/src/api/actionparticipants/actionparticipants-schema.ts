/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

// eslint-disable-next-line @typescript-eslint/no-namespace
export namespace ActionParticipants {
  export interface paths {
    '/actionparticipants': {
      /** @description Returns a collection of Matter participants. For information on how to construct requests filtering by various properties, please refer to the API Developer Portal. */
      get: {
        responses: {
          /** @description OK. */
          200: {
            content: {
              'application/json': components['schemas']['PagedActionParticipants']
            }
          }
        }
      }
      /** @description Create a new Matter participant. */
      post: {
        requestBody: components['requestBodies']['CreateActionParticipants']
        responses: {
          /** @description OK. */
          200: {
            content: {
              'application/json': components['schemas']['SingleActionParticipant']
            }
          }
        }
      }
    }
    '/actionparticipants/{id}': {
      /** @description Returns a single Matter participant. */
      get: {
        parameters: {
          path: {
            /**
             * @description Unique identifier for a Matter Participant. The identifier is a composite value composed from the Matter identifier, the participant type identifier, and the participant identifier, separated by "--".
             * @example 1024--31--11
             */
            id: string
          }
        }
        responses: {
          /** @description OK. */
          200: {
            content: {
              'application/json': components['schemas']['SingleActionParticipant']
            }
          }
        }
      }
      /** @description Removes a participant from a Matter. */
      delete: {
        parameters: {
          path: {
            /**
             * @description Unique identifier for an Matter participant. The identifier is a composite value composed from the Matter identifier, the participant type identifier, and the participant identifier, separated by "--".
             * @example 1024--31--11
             */
            id: string
          }
        }
        responses: {
          /** @description Success, No content. */
          204: {
            content: never
          }
        }
      }
    }
  }

  export type webhooks = Record<string, never>

  export interface components {
    schemas: {
      SingleActionParticipant: {
        actionparticipants?: components['schemas']['ActionParticipants']
        meta?: components['schemas']['PageMetaData']
        links?: components['schemas']['ActionParticipantsLinks']
      }
      PagedActionParticipants: {
        actionparticipants?: components['schemas']['ActionParticipants'][]
        meta?: components['schemas']['PageMetaData']
      }
      PageMetaData: {
        paging?: components['schemas']['PagingData']
      }
      PagingData: {
        actionparticipants?: components['schemas']['ActionParticipantsPageData']
      }
      ActionParticipantsPageData: {
        /**
         * @description The total number of Matter participants returned by the underlying query.
         * @example 2317
         */
        recordCount?: number
        /**
         * @description The total number of pages generated by the underlying query.
         * @example 47
         */
        pageCount?: number
        /**
         * @description The page number for this page of Matter participants.
         * @example 2
         */
        page?: number
        /**
         * @description Page size.
         * @example 50
         */
        pageSize?: number
        /**
         * @description A URL to the previous page of Matter participants.
         * @example https://ap-southeast-2.actionstep.com/api/rest/actionparticipants?page=1
         */
        prevPage?: string
        /**
         * @description A URL to the next page of Matter participants.
         * @example https://ap-southeast-2.actionstep.com/api/rest/actionparticipants?page=3
         */
        nextPage?: string
      }
      ActionParticipants: {
        /**
         * @description Unique identifier for the Matter participant. The identifier is a composite value composed from the Matter identifier, the participant type identifier, and the participant identifier, separated by "--".
         * @example 1024--31--11
         */
        id?: string
        /**
         * @description The order the Matter participants were added to an action.
         * @example 3
         */
        participantNumber?: number
        links?: components['schemas']['ActionParticipantsLinks']
      }
      ActionParticipantsLinks: {
        /**
         * @description Unique identifier of the associated action.
         * @example 1024
         */
        action?: number
        /**
         * @description Unique identifier of the participant type.
         * @example 31
         */
        participantType?: number
        /**
         * @description Unique identifier of the participant.
         * @example 11
         */
        participant?: number
      }
      CreateActionParticipants: {
        actionparticipants?: components['schemas']['CreateActionParticipantsLinks']
      }
      CreateActionParticipantsLinks: {
        links?: components['schemas']['CreateActionParticipantsLinksLink']
      }
      CreateActionParticipantsLinksLink: {
        /**
         * @description Unique identifier of the associated action.
         * @example 1024
         */
        action?: number
        /**
         * @description Unique identifier of the participant type.
         * @example 31
         */
        participantType?: number
        /**
         * @description Unique identifier of the participant.
         * @example 11
         */
        participant?: number
      }
    }
    responses: never
    parameters: never
    requestBodies: {
      CreateActionParticipants?: {
        content: {
          'application/json': components['schemas']['CreateActionParticipants']
        }
      }
    }
    headers: never
    pathItems: never
  }

  export type $defs = Record<string, never>

  export type external = Record<string, never>

  export type operations = Record<string, never>
}
